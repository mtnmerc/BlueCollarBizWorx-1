{
  "name": "BizWorx Complete Business Automation with Telegram + AI",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "telegram-trigger-1234-5678-90ab-cdef",
      "name": "Telegram Bot Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "baseUrl",
              "value": "https://your-replit-app-name.replit.app"
            },
            {
              "name": "apiKey",
              "value": "your_actual_api_key_here"
            }
          ]
        },
        "options": {}
      },
      "id": "config123-4567-89ab-cdef-0123456789ab",
      "name": "Set BizWorx Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Check if message is a voice message, text, or command\nconst message = $input.first().json.message;\nconst chatId = message.chat.id;\n\nlet messageText = '';\nlet messageType = 'text';\nlet hasVoice = false;\n\n// Handle voice messages\nif (message.voice) {\n  messageType = 'voice';\n  hasVoice = true;\n  messageText = '[Voice Message - needs transcription]';\n} else if (message.audio) {\n  messageType = 'audio';\n  hasVoice = true;\n  messageText = '[Audio Message - needs transcription]';\n} else if (message.text) {\n  messageText = message.text;\n  messageType = 'text';\n}\n\n// Check if it's already a structured command\nconst isStructuredCommand = messageText.startsWith('/') && messageText.includes(':');\n\nreturn {\n  chatId: chatId,\n  originalMessage: messageText,\n  messageType: messageType,\n  hasVoice: hasVoice,\n  isStructuredCommand: isStructuredCommand,\n  needsAiProcessing: !isStructuredCommand, // Only process with AI if it's not already structured\n  voiceFileId: message.voice?.file_id || message.audio?.file_id || null,\n  messageId: message.message_id\n};"
      },
      "id": "message-analyzer-1234-5678-90ab-cdef",
      "name": "Analyze Message Type",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsAiProcessing }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "if-needs-ai-processing-1234-5678",
      "name": "If Needs AI Processing",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": {
          "chatMessages": [
            {
              "role": "system",
              "content": "You are a business automation assistant for BizWorx. Your job is to interpret natural language commands and convert them into structured commands.\n\nAvailable commands:\n- create_client: Create a new client\n- create_job: Create a new job/service appointment\n- schedule_job: Schedule a job for a specific time\n- create_invoice: Create an invoice\n- create_estimate: Create an estimate\n- edit_invoice: Update an existing invoice\n- edit_estimate: Update an existing estimate\n- get_stats: Get business dashboard statistics\n- get_jobs: List current jobs\n- get_invoices: List recent invoices\n- help: Show available commands\n\nWhen the user says something in natural language, convert it to the appropriate structured command format.\n\nExamples:\n- \"Create a client named John Smith with email john@email.com and phone 555-1234\" → \"/create_client name:\"John Smith\" email:\"john@email.com\" phone:\"555-1234\"\n- \"Schedule a plumbing job for client 1 tomorrow at 2pm\" → \"/schedule_job title:\"Plumbing Job\" client:1 start:\"2024-01-15T14:00:00Z\"\n- \"Create an invoice for client 2 for the kitchen repair job\" → \"/create_invoice client:2 title:\"Kitchen Repair\" status:\"draft\"\n- \"Show me today's jobs\" → \"/get_jobs\"\n- \"What are my business stats?\" → \"/get_stats\"\n\nIMPORTANT: \n- Always respond with ONLY the structured command, nothing else\n- Use proper date formatting (ISO 8601: YYYY-MM-DDTHH:mm:ssZ)\n- If you need clarification, ask a specific question\n- For relative dates like \"tomorrow\", \"next week\", calculate the actual date\n- Current date context: {{ new Date().toISOString() }}"
            },
            {
              "role": "user",
              "content": "{{ $json.originalMessage }}"
            }
          ]
        },
        "options": {
          "temperature": 0.1,
          "maxTokens": 200
        }
      },
      "id": "ai-command-interpreter-1234-5678-90ab",
      "name": "AI Command Interpreter",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1120, 150],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process AI response and create structured command\nconst aiResponse = $input.first().json.choices[0].message.content.trim();\nconst originalData = $node[\"Analyze Message Type\"].json;\n\n// If AI couldn't process or asked for clarification\nif (!aiResponse.startsWith('/')) {\n  return {\n    ...originalData,\n    processedCommand: null,\n    needsUserResponse: true,\n    aiResponse: aiResponse,\n    command: 'clarification_needed'\n  };\n}\n\n// Parse the structured command from AI\nconst commandMatch = aiResponse.match(/^\\/([a-zA-Z_]+)/);\nconst command = commandMatch ? commandMatch[1] : 'help';\n\n// Parse parameters using regex patterns\nconst parseParams = (text) => {\n  const params = {};\n  \n  // Match key:\"value\" or key:value patterns\n  const paramMatches = text.match(/([a-zA-Z]+):(\"[^\"]*\"|[^\\s]+)/g) || [];\n  \n  paramMatches.forEach(match => {\n    const [key, value] = match.split(':');\n    params[key] = value.replace(/\"/g, ''); // Remove quotes\n  });\n  \n  return params;\n};\n\nconst parameters = parseParams(aiResponse);\n\nreturn {\n  ...originalData,\n  processedCommand: aiResponse,\n  command: command,\n  parameters: parameters,\n  // Extract common parameters with defaults\n  clientId: parameters.clientId || parameters.client || 1,\n  title: parameters.title || `${command} from Natural Language`,\n  description: parameters.description || `Created via natural language: \"${originalData.originalMessage}\"`,\n  scheduledStart: parameters.scheduledStart || parameters.start || new Date().toISOString(),\n  scheduledEnd: parameters.scheduledEnd || parameters.end,\n  priority: parameters.priority || 'normal',\n  status: parameters.status || 'draft',\n  name: parameters.name,\n  email: parameters.email,\n  phone: parameters.phone,\n  address: parameters.address,\n  jobId: parameters.jobId || parameters.job,\n  dueDate: parameters.dueDate || parameters.due,\n  validUntil: parameters.validUntil || parameters.valid,\n  invoiceId: parameters.invoiceId || parameters.invoice,\n  estimateId: parameters.estimateId || parameters.estimate,\n  items: parameters.items ? JSON.parse(parameters.items) : [],\n  needsUserResponse: false\n};"
      },
      "id": "process-ai-response-1234-5678-90ab",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 150]
    },
    {
      "parameters": {
        "jsCode": "// For structured commands, parse them directly\nconst originalData = $input.first().json;\nconst messageText = originalData.originalMessage;\nconst chatId = originalData.chatId;\n\n// Extract command\nconst commandMatch = messageText.match(/^\\/([a-zA-Z_]+)/);\nconst command = commandMatch ? commandMatch[1] : '';\n\n// Parse parameters using regex patterns\nconst parseParams = (text) => {\n  const params = {};
  \n  // Match key:\"value\" or key:value patterns\n  const paramMatches = text.match(/([a-zA-Z]+):(\"[^\"]*\"|[^\\s]+)/g) || [];\n  \n  paramMatches.forEach(match => {\n    const [key, value] = match.split(':');\n    params[key] = value.replace(/\"/g, ''); // Remove quotes\n  });\n  \n  return params;\n};\n\nconst parameters = parseParams(messageText);\n\nreturn {\n  command: command,\n  chatId: chatId,\n  originalMessage: messageText,\n  parameters: parameters,\n  // Extract common parameters with defaults\n  clientId: parameters.clientId || parameters.client || 1,\n  title: parameters.title || `${command} from Telegram`,\n  description: parameters.description || `Created via Telegram bot`,\n  scheduledStart: parameters.scheduledStart || parameters.start || new Date().toISOString(),\n  scheduledEnd: parameters.scheduledEnd || parameters.end,\n  priority: parameters.priority || 'normal',\n  status: parameters.status || 'draft',\n  name: parameters.name,\n  email: parameters.email,\n  phone: parameters.phone,\n  address: parameters.address,\n  jobId: parameters.jobId || parameters.job,\n  dueDate: parameters.dueDate || parameters.due,\n  validUntil: parameters.validUntil || parameters.valid,\n  invoiceId: parameters.invoiceId || parameters.invoice,\n  estimateId: parameters.estimateId || parameters.estimate,\n  items: parameters.items ? JSON.parse(parameters.items) : [],\n  needsUserResponse: false\n};"
      },
      "id": "parse-structured-command-1234-5678",
      "name": "Parse Structured Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 350]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsUserResponse }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "if-needs-clarification-1234-5678",
      "name": "If Needs Clarification",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "🤔 I need more information to help you:\n\n{{ $json.aiResponse }}\n\nPlease provide the missing details or try rephrasing your request.\n\n💡 **Examples:**\n• \"Create a client named John Smith with email john@email.com\"\n• \"Schedule a plumbing job for client 1 tomorrow at 2pm\"\n• \"Create an invoice for client 2\"\n• \"Show me today's jobs\""
      },
      "id": "send-clarification-request-1234-5678",
      "name": "Send Clarification Request",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [1780, 100],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "create_job"
            }
          ]
        }
      },
      "id": "if-create-job-1234-5678-90ab-cd",
      "name": "If Create Job Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "schedule_job"
            }
          ]
        }
      },
      "id": "if-schedule-job-1234-5678-90ab-cd",
      "name": "If Schedule Job Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "create_client"
            }
          ]
        }
      },
      "id": "if-create-client-1234-5678-90ab-cd",
      "name": "If Create Client Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "create_invoice"
            }
          ]
        }
      },
      "id": "if-create-invoice-1234-5678-90ab-cd",
      "name": "If Create Invoice Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "get_stats"
            }
          ]
        }
      },
      "id": "if-get-stats-1234-5678-90ab-cd",
      "name": "If Get Stats Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 600]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "get_jobs"
            }
          ]
        }
      },
      "id": "if-get-jobs-1234-5678-90ab-cd",
      "name": "If Get Jobs Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 700]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.command }}",
              "operation": "equal",
              "value2": "help"
            }
          ]
        }
      },
      "id": "if-help-command-1234-5678-90ab-cd",
      "name": "If Help Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 800]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/jobs",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "value": {
              "clientId": "={{ $json.clientId }}",
              "title": "={{ $json.title }}",
              "description": "={{ $json.description }}",
              "scheduledStart": "={{ $json.scheduledStart }}",
              "status": "scheduled",
              "priority": "={{ $json.priority }}"
            }
          }
        }
      },
      "id": "create-job-api-1234-5678-90ab-cdef",
      "name": "Create Job via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/jobs",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "value": {
              "clientId": "={{ $json.clientId }}",
              "title": "={{ $json.title }}",
              "description": "={{ $json.description }}",
              "scheduledStart": "={{ $json.scheduledStart }}",
              "scheduledEnd": "={{ $json.scheduledEnd }}",
              "status": "scheduled",
              "priority": "={{ $json.priority }}"
            }
          }
        }
      },
      "id": "schedule-job-api-1234-5678-90ab-cdef",
      "name": "Schedule Job via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/clients",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "value": {
              "name": "={{ $json.name || 'New Client from Natural Language' }}",
              "email": "={{ $json.email || 'client@example.com' }}",
              "phone": "={{ $json.phone || '' }}",
              "address": "={{ $json.address || '' }}"
            }
          }
        }
      },
      "id": "create-client-api-1234-5678-90ab-cdef",
      "name": "Create Client via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/invoices",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "value": {
              "clientId": "={{ $json.clientId }}",
              "jobId": "={{ $json.jobId }}",
              "dueDate": "={{ $json.dueDate || new Date(Date.now() + 30*24*60*60*1000).toISOString() }}",
              "items": "={{ $json.items }}",
              "status": "={{ $json.status }}"
            }
          }
        }
      },
      "id": "create-invoice-api-1234-5678-90ab-cdef",
      "name": "Create Invoice via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/dashboard/stats",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}"
          }
        }
      },
      "id": "get-stats-api-1234-5678-90ab-cdef",
      "name": "Get Dashboard Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 600]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "url": "={{$node[\"Set BizWorx Config\"].json[\"baseUrl\"]}}/api/external/jobs",
        "options": {
          "headers": {
            "X-API-Key": "={{$node[\"Set BizWorx Config\"].json[\"apiKey\"]}}"
          }
        }
      },
      "id": "get-jobs-api-1234-5678-90ab-cdef",
      "name": "Get Jobs List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 700]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "✅ **Job Created Successfully!**\n\n📋 **Details:**\n• {{ $json.title }}\n• Status: {{ $json.status }}\n• Priority: {{ $json.priority }}\n• Created: {{ new Date().toLocaleString() }}\n\n🔗 Job ID: {{ $json.id }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-job-response-1234-5678-90ab",
      "name": "Send Job Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 200],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "📅 **Job Scheduled Successfully!**\n\n📋 **Schedule Details:**\n• {{ $json.title }}\n• Start: {{ new Date($json.scheduledStart).toLocaleString() }}\n• Status: {{ $json.status }}\n• Priority: {{ $json.priority }}\n\n🔗 Job ID: {{ $json.id }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-schedule-response-1234-5678-90ab",
      "name": "Send Job Schedule Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 300],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "✅ **Client Created Successfully!**\n\n👤 **Client Details:**\n• Name: {{ $json.name }}\n• Email: {{ $json.email }}\n• Phone: {{ $json.phone }}\n• Created: {{ new Date().toLocaleString() }}\n\n🔗 Client ID: {{ $json.id }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-client-response-1234-5678-90ab",
      "name": "Send Client Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 400],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "💰 **Invoice Created Successfully!**\n\n📄 **Invoice Details:**\n• Invoice ID: {{ $json.id }}\n• Client ID: {{ $json.clientId }}\n• Status: {{ $json.status }}\n• Due Date: {{ new Date($json.dueDate).toLocaleDateString() }}\n• Created: {{ new Date().toLocaleString() }}\n\n🔗 Invoice #{{ $json.id }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-invoice-response-1234-5678-90ab",
      "name": "Send Invoice Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 500],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "📊 **Dashboard Statistics**\n\n💰 **Revenue:** ${{ $json.revenue?.total || 0 }}\n📅 **Today's Jobs:** {{ $json.todaysJobs?.length || 0 }}\n📋 **Recent Invoices:** {{ $json.recentInvoices?.length || 0 }}\n👥 **Team Members:** {{ $json.teamMembers?.length || 0 }}\n\n📈 Updated: {{ new Date().toLocaleString() }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-stats-response-1234-5678-90ab",
      "name": "Send Stats Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 600],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "📋 **Current Jobs List**\n\n{{ $json.slice(0,10).map((job, index) => `${index + 1}. **${job.title}**\\n   Status: ${job.status}\\n   Client: ${job.clientId}\\n   Scheduled: ${job.scheduledStart ? new Date(job.scheduledStart).toLocaleDateString() : 'Not scheduled'}\\n`).join('\\n') || 'No jobs found' }}\n\n📊 Total Jobs: {{ $json.length || 0 }}\n📅 Updated: {{ new Date().toLocaleString() }}\n\n💬 **Original Request:** \"{{ $node[\"Analyze Message Type\"].json.originalMessage }}\""
      },
      "id": "telegram-jobs-response-1234-5678-90ab",
      "name": "Send Jobs List Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 700],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "🤖 **BizWorx AI Assistant**\n\n**🎤 Voice Commands Supported!**\nYou can now speak naturally to manage your business:\n\n**📋 Try saying:**\n• \"Create a client named John Smith with email john@email.com\"\n• \"Schedule a plumbing job for client 1 tomorrow at 2pm\"\n• \"Create an invoice for client 2\"\n• \"Show me today's jobs\"\n• \"What are my business stats?\"\n\n**📝 Or use structured commands:**\n• `/create_client name:\"Client Name\" email:\"email@example.com\"`\n• `/schedule_job title:\"Job Name\" client:1 start:\"2024-01-15T09:00:00Z\"`\n• `/get_stats` - View dashboard statistics\n\n🚀 **Just speak naturally and I'll understand!**"
      },
      "id": "telegram-help-response-1234-5678-90ab",
      "name": "Send Help Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2000, 800],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "OK. Will transcribe voice message"
      },
      "id": "telegram-voice-response-1234-5678-90ab",
      "name": "Send Voice Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [1120, 450],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    }
  ],
  "connections": {
    "Telegram Bot Trigger": {
      "main": [
        [
          {
            "node": "Set BizWorx Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set BizWorx Config": {
      "main": [
        [
          {
            "node": "Analyze Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Message Type": {
      "main": [
        [
          {
            "node": "If Needs AI Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Needs AI Processing": {
      "main": [
        [
          {
            "node": "AI Command Interpreter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Structured Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Command Interpreter": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "If Needs Clarification",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Create Job Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Schedule Job Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Create Client Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Create Invoice Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Get Stats Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Get Jobs Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Help Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Structured Command": {
      "main": [
        [
          {
            "node": "If Create Job Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Schedule Job Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Create Client Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Create Invoice Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Get Stats Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Get Jobs Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Help Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Needs Clarification": {
      "main": [
        [
          {
            "node": "Send Clarification Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Create Job Command": {
      "main": [
        [
          {
            "node": "Create Job via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Schedule Job Command": {
      "main": [
        [
          {
            "node": "Schedule Job via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Create Client Command": {
      "main": [
        [
          {
            "node": "Create Client via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Create Invoice Command": {
      "main": [
        [
          {
            "node": "Create Invoice via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Get Stats Command": {
      "main": [
        [
          {
            "node": "Get Dashboard Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Get Jobs Command": {
      "main": [
        [
          {
            "node": "Get Jobs List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Help Command": {
      "main": [
        [
          {
            "node": "Send Help Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Job via API": {
      "main": [
        [
          {
            "node": "Send Job Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Job via API": {
      "main": [
        [
          {
            "node": "Send Job Schedule Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client via API": {
      "main": [
        [
          {
            "node": "Send Client Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Invoice via API": {
      "main": [
        [
          {
            "node": "Send Invoice Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dashboard Stats": {
      "main": [
        [
          {
            "node": "Send Stats Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Jobs List": {
      "main": [
        [
          {
            "node": "Send Jobs List Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-07T12:00:00.000Z",
  "id": "bizworx-telegram-ai-workflow",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "BizWorx Complete Business Automation with Telegram + AI",
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-07T12:00:00.000Z",
      "id": "bizworx-telegram-ai-automation",
      "name": "BizWorx Telegram AI Automation",
      "updatedAt": "2024-01-07T12:00:00.000Z"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-07T12:00:00.000Z",
  "versionId": "5"
}