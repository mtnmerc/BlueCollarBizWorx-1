
{
  "name": "BizWorx Voice Commands (MCP Simplified)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "your-webhook-id"
    },
    {
      "parameters": {
        "jsCode": "// Process incoming Telegram message\nconst message = $input.first();\nconst chatId = message.json.message?.chat?.id || message.json.callback_query?.message?.chat?.id;\nconst messageId = message.json.message?.message_id || message.json.callback_query?.message?.message_id;\nconst text = message.json.message?.text || message.json.message?.caption || '';\nconst voice = message.json.message?.voice;\n\n// Handle voice messages\nif (voice) {\n  return {\n    chatId,\n    messageId,\n    hasVoice: true,\n    fileId: voice.file_id,\n    text: null\n  };\n}\n\n// Handle text messages\nif (text) {\n  return {\n    chatId,\n    messageId,\n    hasVoice: false,\n    fileId: null,\n    text: text\n  };\n}\n\nreturn null;"
      },
      "id": "process-message",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.hasVoice }}",
            "operation": "equal",
            "rightValue": true
          }
        }
      },
      "id": "voice-check",
      "name": "Voice Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "fileId": "={{ $json.fileId }}"
      },
      "id": "get-voice-file",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "model": "whisper-1",
        "options": {
          "response_format": "text"
        }
      },
      "id": "speech-to-text",
      "name": "Speech to Text",
      "type": "@n8n/n8n-nodes-langchain.openAiWhisper",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "content": "=You are a business management assistant. Analyze this command and extract the operation and parameters needed for the BizWorx API.\n\nAvailable operations:\n- get_clients: Get all clients\n- create_client: Create new client (needs: name, email, phone?, address?)\n- get_jobs: Get jobs (optional: date in YYYY-MM-DD format)\n- create_job: Create job (needs: clientId, title, description?, address?, scheduledStart, scheduledEnd?)\n- get_invoices: Get all invoices\n- create_invoice: Create invoice (needs: clientId, title, description?, lineItems array, total)\n- get_estimates: Get all estimates\n- create_estimate: Create estimate (needs: clientId, title, description?, lineItems array, total, validUntil?)\n- update_job_status: Update job status (needs: jobId, status: scheduled/in_progress/completed/cancelled)\n- get_revenue_stats: Get revenue stats (optional: month, year)\n- get_services: Get all services\n\nUser command: {{ $('speech-to-text').item ? $('speech-to-text').first().json.text : $('process-message').first().json.text }}\n\nRespond with JSON only:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\"param1\": \"value1\"},\n  \"confidence\": 0.95\n}",
              "role": "user"
            }
          ]
        },
        "options": {
          "response_format": "json_object"
        }
      },
      "id": "ai-command-parser",
      "name": "AI Command Parser",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "serverUrl": "https://your-deployment-url.replit.app:3001",
        "sseEndpoint": "/mcp/events",
        "callEndpoint": "/mcp/call"
      },
      "id": "mcp-server",
      "name": "BizWorx MCP Server",
      "type": "n8n-nodes-base.mcp",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format the response for Telegram\nconst mcpResult = $input.first().json;\nconst commandData = $('ai-command-parser').first().json;\nconst processedData = $('process-message').first().json;\n\nlet responseText = '';\n\ntry {\n  const result = mcpResult.result;\n  const operation = JSON.parse(commandData.choices[0].message.content).operation;\n  \n  switch (operation) {\n    case 'get_clients':\n      const clients = JSON.parse(result.content[0].text);\n      responseText = `üë• Clients (${clients.length}):\\n\\n${clients.map(c => `‚Ä¢ ${c.name} - ${c.email}`).join('\\n')}`;\n      break;\n      \n    case 'create_client':\n      const newClient = JSON.parse(result.content[0].text);\n      responseText = `‚úÖ Client created successfully!\\n\\nName: ${newClient.name}\\nEmail: ${newClient.email}\\nID: ${newClient.id}`;\n      break;\n      \n    case 'get_jobs':\n      const jobs = JSON.parse(result.content[0].text);\n      responseText = `üìã Jobs (${jobs.length}):\\n\\n${jobs.map(j => `‚Ä¢ ${j.title} - ${j.clientName || 'Client ID: ' + j.clientId}\\n  Status: ${j.status}\\n  Scheduled: ${new Date(j.scheduledStart).toLocaleString()}`).join('\\n\\n')}`;\n      break;\n      \n    case 'create_job':\n      const newJob = JSON.parse(result.content[0].text);\n      responseText = `‚úÖ Job created successfully!\\n\\nTitle: ${newJob.title}\\nClient ID: ${newJob.clientId}\\nScheduled: ${new Date(newJob.scheduledStart).toLocaleString()}\\nJob ID: ${newJob.id}`;\n      break;\n      \n    case 'get_revenue_stats':\n      const stats = JSON.parse(result.content[0].text);\n      responseText = `üí∞ Revenue Statistics\\n\\nTotal: $${stats.total || 0}\\nInvoices: ${stats.count || 0}\\nPeriod: ${stats.month || new Date().getMonth() + 1}/${stats.year || new Date().getFullYear()}`;\n      break;\n      \n    default:\n      responseText = `‚úÖ Operation completed!\\n\\n${JSON.stringify(result, null, 2)}`;\n  }\n} catch (error) {\n  responseText = `‚ùå Error: ${error.message}`;\n}\n\nreturn {\n  chatId: processedData.chatId,\n  messageId: processedData.messageId,\n  response: responseText\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.response }}",
        "replyToMessageId": "={{ $json.messageId }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "telegram-response",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2000, 300]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-12-09T00:00:00.000Z",
  "versionId": "00000000-0000-0000-0000-000000000000"
}
